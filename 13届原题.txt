

#3
name=input()
s=int(name[1])
l=1189
w=841
for i in range(1,s+1):
    if w>l:
        l,w=w//2,l
    else:
        l=l//2
if l<w:
    l,w=w,l
print(l,w,sep='\n')


#4数论基本处理操作！！！
n=int(input())
m=int(input())
s={}
for i in range(1,n+1):
    s[i]=sum(list(map(int,str(i))))
l=list(s.items())
l.sort(key=lambda x:x[1])
print(l[m-1][0])



#5
def remove_edge():
global s
rm = set()
for i in range(1, len(s) - 1):
if s[i] == s[i + 1] and s[i - 1] != s[i]:
rm.add(i - 1)
rm.add(i)
if s[i] == s[i - 1] and s[i] != s[i + 1]:
rm.add(i)
rm.add(i + 1)
for i in rm:
s[i] = ''
s = list(''.join(s))


s = list(input())
for i in range(2 ** 64):
ls = s
remove_edge()
if ls == s:
print(''.join(s))
break
if len(s) == 0:
print('EMPTY')
break
else:
print(''.join(s))



def f(s):             #删除一个字符串s的所有边缘字符
    d=set()           #集合结构确保边缘字符不重复
    for i in range(1,len(s)-1):
        if s[i]==s[i-1] and s[i]!=s[i+1]:
            d.add(i)
            d.add(i+1)
        if s[i]==s[i+1] and s[i-1]!=s[i]:
            d.add(i-1)
            d.add(i)
    s=list(s)         #转化成列表方便操作
    for i in d:       #删除集合里的边缘字符
        s[i]=''    
    return ''.join(s) #转换回字符串
 
s=input()
for i in range(2**64):
    temp=s            #temp记录一开始的字符串
    s=f(s)            #进行一次函数运算
    if s==temp:       #运算后和运算前字符串相同，说明已删除到最简形式
        print(s)      #直接输出结果
        break         #结束循环
    if len(s)==0:
        print('EMPTY')
        break


#
from itertools import *
n=int(input())
c=0
a=[i for i in range(1,n+1)]
for element in permutations(a):
    for i in range(1,n):
        for j in range(0,i):
            if element[j]<element[i]:
                c+=1
print(c)




# 
n,m=map(int,input().split())
a=[list(map(int,input().split())) for i in range(n)]
ans=0
while m:
    a.sort(key=lambda x:x[0],reverse=True)
    if a[0][0]>0:
        ans+=a[0][0]
        a[0][0]-=a[0][1]
        m-=1
    else:
        break
print(ans)


#

